{
  "_from": "socketio-auth",
  "_id": "socketio-auth@0.1.1",
  "_inBundle": false,
  "_integrity": "sha512-TDM/yiA5tnDiJqn8fO5zHrvTaKmN4EK4Dci9RaJLO11LEEbC1/E7z352OFrIWg8d/rn+Nk666ks9RhjlkGILlA==",
  "_location": "/socketio-auth",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "socketio-auth",
    "fetchSpec": "latest",
    "name": "socketio-auth",
    "raw": "socketio-auth",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/socketio-auth/-/socketio-auth-0.1.1.tgz",
  "_shasum": "03f1fdd9d9b5e10f0a0ea9502abadbc580015d71",
  "_shrinkwrap": null,
  "_spec": "socketio-auth",
  "_where": "/home/shivap/Desktop/some",
  "author": {
    "name": "Facundo Olano and Mart√≠n Paulucci"
  },
  "bugs": {
    "url": "https://github.com/facundoolano/socketio-auth/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "debug": "^2.1.3",
    "lodash": "^4.17.5"
  },
  "deprecated": false,
  "description": "Authentication for socket.io",
  "devDependencies": {
    "jscs": "~1.8.0",
    "jshint": "~2.5.10",
    "mocha": "^1.21.5"
  },
  "directories": {
    "test": "test"
  },
  "homepage": "https://github.com/facundoolano/socketio-auth",
  "keywords": [
    "auth",
    "authentication",
    "invisible.js",
    "socket",
    "socket.io"
  ],
  "license": "ISC",
  "main": "index.js",
  "name": "socketio-auth",
  "optionalDependencies": {},
  "readme": "# socketio-auth [![Build Status](https://secure.travis-ci.org/facundoolano/socketio-auth.png)](http://travis-ci.org/facundoolano/socketio-auth)\n\nThis module provides hooks to implement authentication in [socket.io](https://github.com/Automattic/socket.io) without using querystrings to send credentials, which is not a good security practice.\n\nClient:\n```javascript\nvar socket = io.connect('http://localhost');\nsocket.on('connect', function(){\n  socket.emit('authentication', {username: \"John\", password: \"secret\"});\n  socket.on('authenticated', function() {\n    // use the socket as usual\n  });\n});\n```\n\nServer:\n```javascript\nvar io = require('socket.io').listen(app);\n\nrequire('socketio-auth')(io, {\n  authenticate: function (socket, data, callback) {\n    //get credentials sent by the client\n    var username = data.username;\n    var password = data.password;\n\n    db.findUser('User', {username:username}, function(err, user) {\n\n      //inform the callback of auth success/failure\n      if (err || !user) return callback(new Error(\"User not found\"));\n      return callback(null, user.password == password);\n    });\n  }\n});\n```\n\nThe client should send an `authentication` event right after connecting, including whatever credentials are needed by the server to identify the user (i.e. user/password, auth token, etc.). The `authenticate` function receives those same credentials in 'data', and the actual 'socket' in case header information like the origin domain is important, and uses them to authenticate.\n\n## Configuration\n\nTo setup authentication for the socket.io connections, just pass the server socket to socketio-auth with a configuration object:\n\n```javascript\nvar io = require('socket.io').listen(app);\n\nrequire('socketio-auth')(io, {\n  authenticate: authenticate,\n  postAuthenticate: postAuthenticate,\n  disconnect: disconnect,\n  timeout: 1000\n});\n```\n\nThe supported parameters are:\n\n* `authenticate`: The only required parameter. It's a function that takes the data sent by the client and calls a callback indicating if authentication was successfull:\n\n```javascript\nfunction authenticate(socket, data, callback) {\n  var username = data.username;\n  var password = data.password;\n\n  db.findUser('User', {username:username}, function(err, user) {\n    if (err || !user) return callback(new Error(\"User not found\"));\n    return callback(null, user.password == password);\n  });\n}\n```\n* `postAuthenticate`: a function to be called after the client is authenticated. It's useful to keep track of the user associated with a client socket:\n\n```javascript\nfunction postAuthenticate(socket, data) {\n  var username = data.username;\n\n  db.findUser('User', {username:username}, function(err, user) {\n    socket.client.user = user;\n  });\n}\n```\n* `disconnect`: a function to be called after the client is disconnected.\n\n```javascript\nfunction disconnect(socket) {\n  console.log(socket.id + ' disconnected');\n}\n```\n\n* `timeout`: The amount of millisenconds to wait for a client to authenticate before disconnecting it. Defaults to 1000. The value 'none' disables the timeout feature.\n\n## Auth error messages\n\nWhen client authentication fails, the server will emit an `unauthorized` event with the failure reason:\n\n```javascript\nsocket.emit('authentication', {username: \"John\", password: \"secret\"});\nsocket.on('unauthorized', function(err){\n  console.log(\"There was an error with the authentication:\", err.message);\n});\n```\n\nThe value of `err.message` depends on the outcome of the `authenticate` function used in the server: if the callback receives an error its message is used, if the success parameter is false the message is `'Authentication failure'`\n\n```javascript\nfunction authenticate(socket, data, callback) {\n  db.findUser('User', {username:data.username}, function(err, user) {\n    if (err || !user) {\n      //err.message will be \"User not found\"\n      return callback(new Error(\"User not found\"));\n    }\n\n    //if wrong password err.message will be \"Authentication failure\"\n    return callback(null, user.password == data.password);\n  });\n}\n```\n\nAfter receiving the `unauthorized` event, the client is disconnected.\n\n## Implementation details\n\n**socketio-auth** implements two-step authentication: upon connection, the server marks the clients as unauthenticated and listens to an `authentication` event. If a client provides wrong credentials or doesn't authenticate after a timeout period it gets disconnected. While the server waits for a connected client to authenticate, it won't emit any broadcast/namespace events to it. By using this approach the sensitive authentication data, such as user credentials or tokens, travel in the body of a secure request, rather than a querystring that can be logged or cached.\n\nNote that during the window while the server waits for authentication, direct messages emitted to the socket (i.e. `socket.emit(msg)`) *will* be received by the client. To avoid those types of messages reaching unauthorized clients, the emission code should either be defined after the `authenticated` event is triggered by the server or the `socket.auth` flag should be checked to make sure the socket is authenticated.\n\nSee [this blog post](https://facundoolano.wordpress.com/2014/10/11/better-authentication-for-socket-io-no-query-strings/) for more details on this authentication method.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/facundoolano/socketio-auth.git"
  },
  "scripts": {
    "jscs": "jscs lib/ test/",
    "jshint": "jshint lib/ test/",
    "lint": "npm run jshint && npm run jscs",
    "pretest": "npm run lint",
    "test": "mocha"
  },
  "version": "0.1.1"
}
